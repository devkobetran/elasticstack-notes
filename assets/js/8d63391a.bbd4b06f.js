"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[8804],{6199:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var i=s(4848),r=s(8453);const t={sidebar_position:7},l="Improving Search Results",a={id:"tutorial/improving-search-results",title:"Improving Search Results",description:"Proximity Searches",source:"@site/docs/tutorial/improving-search-results.md",sourceDirName:"tutorial",slug:"/tutorial/improving-search-results",permalink:"/elasticstack-notes/docs/tutorial/improving-search-results",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/elasticstack-notes/docs/tutorial/improving-search-results.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Aggregations",permalink:"/elasticstack-notes/docs/tutorial/aggregations"}},c={},o=[{value:"Proximity Searches",id:"proximity-searches",level:2},{value:"Affecting Relevance scoring with proximity",id:"affecting-relevance-scoring-with-proximity",level:2},{value:"Fuzzy Match Query (Handling Typos)",id:"fuzzy-match-query-handling-typos",level:2},{value:"Fuzzy Query",id:"fuzzy-query",level:2},{value:"Adding Synonyms",id:"adding-synonyms",level:2},{value:"Adding synonyms from file",id:"adding-synonyms-from-file",level:2},{value:"Highlighting matches in fields",id:"highlighting-matches-in-fields",level:2},{value:"Stemming",id:"stemming",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"improving-search-results",children:"Improving Search Results"})}),"\n",(0,i.jsx)(n.h2,{id:"proximity-searches",children:"Proximity Searches"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /proximity/_search\n{\n    "query": {\n        "match_phrase": {\n            "title": {\n                "query": "spicy sauce",\n                "slop": 1\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["Suppose that we want to allow a term in between the spicy and sauce terms, we can accomplish this by adding a parameter named ",(0,i.jsx)(n.code,{children:"slop"})," for the match phrase query."]}),(0,i.jsx)(n.p,{children:"The value for this slop parameter should be an integer representing how far apart terms are allowed to be while still being considered a match."}),(0,i.jsx)(n.p,{children:"How far apart refers to how many times a term may be moved for a document to match."}),(0,i.jsx)(n.p,{children:"This example above satisfies a slop value of one which allows a single move to be made to make a document match."}),(0,i.jsx)(n.p,{children:'e.g. It allows "spicy tomato sauce" to match'})]}),"\n",(0,i.jsx)(n.h2,{id:"affecting-relevance-scoring-with-proximity",children:"Affecting Relevance scoring with proximity"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The closer the proximity, the higher the relevance scores.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In other words, the lower the edit distance, the higher the relevance scores."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Proximity is one of the factors of relevance scores but is not the only one that makes a big difference."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /proximity/_search\n{\n    "query": {\n        "bool": {\n            "must": [\n                "match": {\n                    "title": {\n                        "query": "spicy sauce"\n                    }\n                }\n            ],\n            "should": [\n                {\n                    "match_phrase": {\n                        "title": {\n                            "query": "spicy sauce",\n                            "slop": 5\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"fuzzy-match-query-handling-typos",children:"Fuzzy Match Query (Handling Typos)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This ",(0,i.jsx)(n.code,{children:"fuzziness"})," parameters account for when users make typos or mispellings"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /product/_search\n{\n    "query": {\n        "match": {\n            "name": {\n                "query": "l0bster",\n                "fuzziness": "auto"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Without the ",(0,i.jsx)(n.code,{children:"fuzziness"}),' parameter, "l0bster" will not show "lobster" search results.']}),"\n",(0,i.jsxs)(n.li,{children:["Maximum fuzziness value is 2.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Most misspellngs are just 1 or 2 characters."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /product/_search\n{\n    "query": {\n        "match": {\n            "name": {\n                "query": "l0bster love",\n                "operator": "and",\n                "fuzziness": 1\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"fuzziness of 1 can also be applied for each word in the query."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /product/_search\n{\n    "query": {\n        "match": {\n            "name": {\n                "query": "lvie",\n                "fuzziness": 1,\n                "fuzzy_transpositions": false\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Transpositions example: AB -- BA"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fuzzy_transpositions"})," are enabled true by default.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"They count as 1 edit instead of 2."}),"\n",(0,i.jsx)(n.li,{children:"e.g. live -- lvie"}),"\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"fuzzy_transpositions"})," is false, need to set ",(0,i.jsx)(n.code,{children:"fuzziness"}),' to 2 to find search results with "live" value.']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fuzzy-query",children:"Fuzzy Query"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /product/_search\n{\n    "query": {\n        "fuzzy": {\n            "name": {\n                "value": "LOBSTER",\n                "fuzziness": "auto"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Fuzzy Query is a term-level query.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Thus, fuzzy query is not analyzed."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Therefore, prefer to use the match query with a ",(0,i.jsx)(n.code,{children:"fuzziness"})," parameter."]})}),"\n",(0,i.jsx)(n.h2,{id:"adding-synonyms",children:"Adding Synonyms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'PUT /synonyms\n{\n    "settings": {\n        "analysis": {\n            "filter": {\n                "synonym_test": {\n                    "type": "synonym",\n                    "synonyms": [\n                        "awful" => "terrible",\n                        "awesome" => "great, super",\n                        "weird, strange"\n                    ]\n                }\n            },\n\n            ...\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:'All "awfuls" being search will show up terrible, too.'}),(0,i.jsx)(n.p,{children:'"weird, strange" are placed at the same position, so no replacement occurs.'})]}),"\n",(0,i.jsx)(n.h2,{id:"adding-synonyms-from-file",children:"Adding synonyms from file"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For words with so many synonyms, store the synonyms on a text file to reference"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'...\n\n"synonym_test": {\n    "type": "synonym",\n    "synonyms_path": "analysis/synonyms.txt"\n}\n\n...\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The synonym files should be available on all notes storing documents for the index using the analyzer."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Elasticsearch picks up the new synonym when restarting a node but it does not re-index documents when starting back up."})}),"\n",(0,i.jsx)(n.h2,{id:"highlighting-matches-in-fields",children:"Highlighting matches in fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /highlighting/_search\n{\n    "_source": false,\n    "query": {\n        "match": { "description": "Elasticsearch story" }\n    },\n    "highlight": {\n        "fields": {\n            "description": {}\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Next example, wrap matches within a different tag.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use pre-tags and post-tags parameters."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /highlighting/_search\n{\n    "_source": false,\n    "query": {\n        "match": { "description": "Elasticsearch story" }\n    },\n    "highlight": {\n        "pre-tags": ["<strong>"],\n        "post-tags": ["</strong>"],\n        "fields": {\n            "description": {}\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"stemming",children:"Stemming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use stemming to improve the matches of search queries."}),"\n",(0,i.jsx)(n.li,{children:"A stemmer is applied to a field."}),"\n",(0,i.jsx)(n.li,{children:"Elasticsearch will highlight the original words even after stemming has been applied to a text field."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'PUT /stemming_test\n{\n    ...\n\n    "stemmer_test": {\n        "type": "stemmer",\n        "name" : "english"\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);