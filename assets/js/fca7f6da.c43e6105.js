"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[5219],{8533:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});var s=i(4848),l=i(8453);const d={sidebar_position:2},r="Mapping and Analysis",t={id:"tutorial/mapping-and-analysis",title:"Mapping and Analysis",description:"Intro to Analysis",source:"@site/docs/tutorial/mapping-and-analysis.md",sourceDirName:"tutorial",slug:"/tutorial/mapping-and-analysis",permalink:"/elasticstack-notes/docs/tutorial/mapping-and-analysis",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/elasticstack-notes/docs/tutorial/mapping-and-analysis.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Managing Documents",permalink:"/elasticstack-notes/docs/tutorial/managing-documents"},next:{title:"Searching for Data",permalink:"/elasticstack-notes/docs/tutorial/searching-for-data"}},a={},c=[{value:"Intro to Analysis",id:"intro-to-analysis",level:2},{value:"Using the Analyze API",id:"using-the-analyze-api",level:2},{value:"Understanding inverted indices",id:"understanding-inverted-indices",level:2},{value:"Introduction to mapping",id:"introduction-to-mapping",level:2},{value:"Overview of data types",id:"overview-of-data-types",level:2},{value:"Object data type",id:"object-data-type",level:3},{value:"Nested data type",id:"nested-data-type",level:3},{value:"Keyword data type",id:"keyword-data-type",level:3},{value:"How the keyword data type works",id:"how-the-keyword-data-type-works",level:2},{value:"Understanding type coercion",id:"understanding-type-coercion",level:2},{value:"Understanding the <code>__source</code> object",id:"understanding-the-__source-object",level:3},{value:"More on Coercion",id:"more-on-coercion",level:3},{value:"Understanding arrays",id:"understanding-arrays",level:2},{value:"Nested Arrays",id:"nested-arrays",level:3},{value:"Adding explicit mappings",id:"adding-explicit-mappings",level:2},{value:"Retrieving Mappings",id:"retrieving-mappings",level:2},{value:"Using dot notation in field names",id:"using-dot-notation-in-field-names",level:2},{value:"Adding mappings to existing indices",id:"adding-mappings-to-existing-indices",level:2},{value:"How dates work in Elasticsearch",id:"how-dates-work-in-elasticsearch",level:2},{value:"Default behavior of date fields",id:"default-behavior-of-date-fields",level:3},{value:"How <code>date</code> fields are stored",id:"how-date-fields-are-stored",level:3},{value:"How missing fields are handled",id:"how-missing-fields-are-handled",level:2},{value:"Overview of mapping parameters",id:"overview-of-mapping-parameters",level:2},{value:"<code>format</code> parameter",id:"format-parameter",level:3},{value:"<code>properties</code> parameter",id:"properties-parameter",level:3},{value:"<code>coerce</code> parameter",id:"coerce-parameter",level:3},{value:"Introduction to <code>doc_values</code>",id:"introduction-to-doc_values",level:3},{value:"Disabling <code>doc_values</code>",id:"disabling-doc_values",level:3},{value:"<code>norms</code> parameter",id:"norms-parameter",level:3},{value:"<code>index</code> parameter",id:"index-parameter",level:3},{value:"<code>null_value</code> parameter",id:"null_value-parameter",level:3},{value:"<code>copy_to</code> parameter",id:"copy_to-parameter",level:3},{value:"Updating existing mappings",id:"updating-existing-mappings",level:2},{value:"Limitations for updating mappings",id:"limitations-for-updating-mappings",level:3},{value:"Reindexing documents with the Reindex API",id:"reindexing-documents-with-the-reindex-api",level:2},{value:"<code>__source</code> data types",id:"__source-data-types",level:3},{value:"Reindex documents matching a query",id:"reindex-documents-matching-a-query",level:3},{value:"Reindex only positive reviews",id:"reindex-only-positive-reviews",level:3},{value:"Removing fields",id:"removing-fields",level:3},{value:"Changing a field&#39;s name",id:"changing-a-fields-name",level:3},{value:"Using <code>ctx.op</code> within scripts",id:"using-ctxop-within-scripts",level:3},{value:"Parameters for the Reindex API",id:"parameters-for-the-reindex-api",level:3},{value:"Batching &amp; Throttling",id:"batching--throttling",level:3},{value:"Defining field aliases",id:"defining-field-aliases",level:2},{value:"Updating field aliases",id:"updating-field-aliases",level:3},{value:"Index Aliases",id:"index-aliases",level:3},{value:"Multi-field mappings",id:"multi-field-mappings",level:2},{value:"Index Templates",id:"index-templates",level:2},{value:"Structure of index Templates",id:"structure-of-index-templates",level:3},{value:"Priorities",id:"priorities",level:3},{value:"Introduction to dynamic mapping",id:"introduction-to-dynamic-mapping",level:2},{value:"Configuring dynamic mapping",id:"configuring-dynamic-mapping",level:2},{value:"Setting <code>dynamic</code> to <code>false</code>",id:"setting-dynamic-to-false",level:3},{value:"Setting <code>dynamic</code> to <code>strict</code>",id:"setting-dynamic-to-strict",level:3},{value:"Numeric Detection",id:"numeric-detection",level:3},{value:"Dynamic Templates",id:"dynamic-templates",level:2},{value:"<code>match</code> and <code>unmatch</code> parameters",id:"match-and-unmatch-parameters",level:3},{value:"<code>path_match</code> and <code>path_unmatch</code> parameters",id:"path_match-and-path_unmatch-parameters",level:3},{value:"Index templates vs dynamic templates",id:"index-templates-vs-dynamic-templates",level:3},{value:"Mapping Recommendations",id:"mapping-recommendations",level:2},{value:"Mapping of text fields",id:"mapping-of-text-fields",level:3},{value:"Disable Coercion",id:"disable-coercion",level:3},{value:"Use appropriate numeric data types",id:"use-appropriate-numeric-data-types",level:3},{value:"Mapping parameters",id:"mapping-parameters",level:3},{value:"Stemming &amp; Stop words",id:"stemming--stop-words",level:3},{value:"Built-in Analyzers",id:"built-in-analyzers",level:2},{value:"<code>standard</code> analyzer",id:"standard-analyzer",level:3},{value:"<code>simple</code> analyzer",id:"simple-analyzer",level:3},{value:"<code>whitespace</code> analyzer",id:"whitespace-analyzer",level:3},{value:"<code>keyword</code> analyzer",id:"keyword-analyzer",level:3},{value:"<code>pattern</code> analyzer",id:"pattern-analyzer",level:3},{value:"Custom Analyzers",id:"custom-analyzers",level:2},{value:"Adding Analyzers to existing indices",id:"adding-analyzers-to-existing-indices",level:2},{value:"Open &amp; Closed Indices",id:"open--closed-indices",level:3},{value:"Dynamic and static settings",id:"dynamic-and-static-settings",level:3},{value:"Opening &amp; closing indices",id:"opening--closing-indices",level:3},{value:"Updating Analyzers",id:"updating-analyzers",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mapping-and-analysis",children:"Mapping and Analysis"})}),"\n",(0,s.jsx)(n.h2,{id:"intro-to-analysis",children:"Intro to Analysis"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Aka ",(0,s.jsx)(n.strong,{children:"text analysis"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Applies to text fields / values"}),"\n",(0,s.jsx)(n.li,{children:"Text values are analyzed when indexing documents"}),"\n",(0,s.jsx)(n.li,{children:"The result is stored in data stuctures that are efficient for searching"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"_source"})," object is not used when searching for documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It contains the exact values specified when indexing a document"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart LR\n\nA[Document] --\x3e B((Analyzer))\nB --\x3e C[(Storage)]\n\nstyle A fill:white,color:black;\nstyle B fill:orange,color:white;\nstyle C fill:grey,color:white,stroke:black;"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.strong,{children:"Analyzer"})," is made of:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Character Filters"}),": receives the original text and adds, removes, or changes characters."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Zero or more character filters can be present"}),"\n",(0,s.jsx)(n.li,{children:"Character filters are applied in the order in which they are specified"}),"\n",(0,s.jsx)(n.li,{children:"e.g. remove html tags and only keep the text"}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tokenizer"}),": tokenizes a string, meaning split the text into tokens"]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"There can only be one tokenizer"}),"\n",(0,s.jsx)(n.li,{children:"Characters could be removed such as punctuation"}),"\n",(0,s.jsx)(n.li,{children:"e.g. Split a sentence word by word and remove punctuation and white spaces"}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Token Filters"}),": receive the output of the tokenizer as input (the tokens)"]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"could add, remove, or modify tokens"}),"\n",(0,s.jsx)(n.li,{children:"zero or more token filters can be present"}),"\n",(0,s.jsx)(n.li,{children:"Token filters are applied in the order in which they are specified"}),"\n",(0,s.jsx)(n.li,{children:"e.g. lowercase all the tokens"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"using-the-analyze-api",children:"Using the Analyze API"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Open up localhost Kibana Console"}),"\n",(0,s.jsx)(n.li,{children:"Compare this query:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_analyze\n{\n    "text": "1 random sentence     in the air, but then the... PUPPIES :0"\n    "analyzer": "standard"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"to this query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_analyze\n{\n    "text": "1 random sentence     in the air, but then the... PUPPIES :0"\n    "char_filter": [],\n    "tokenizer": "standard",\n    "filter": ["lowercase"]\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"These two queries have the same output!"}),(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"analyzer"})," is broken up into three parts: ",(0,s.jsx)(n.code,{children:"char_filter"}),", ",(0,s.jsx)(n.code,{children:"tokenizer"}),", and ",(0,s.jsx)(n.code,{children:"filter"}),"."]})]}),"\n",(0,s.jsx)(n.h2,{id:"understanding-inverted-indices",children:"Understanding inverted indices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A field's values are stored in one of several data structures","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The data structure depends on the field's data type"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Ensures efficient data access (e.g. searches)"}),"\n",(0,s.jsx)(n.li,{children:"Handled by Apache Lucene, not Elasticsearch"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inverted Indices"}),": mapping between terms and which documents contain them","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"terms are the tokens emitted by the analyzer"}),"\n",(0,s.jsx)(n.li,{children:"terms are sorted alphabetically for performance reasons"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Inverted indices enable fast searches"}),"\n",(0,s.jsxs)(n.li,{children:["Inverted indices contain more than just terms and document IDs","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"information for relevance scoring"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"One inverted index per text field"}),"\n",(0,s.jsx)(n.li,{children:"Other data types like numeric, date, etc use BKD trees"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-mapping",children:"Introduction to mapping"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mapping"})," defines the structure of documents (fields and their data types)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"used to configure how values are indexed"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Analogy --\x3e a table schema in a relational database"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explicit Mapping"})," define field mappings ourselves"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic mapping"}),": elasticsearch generates field mappings for us"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview-of-data-types",children:"Overview of data types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html",children:"Field Data Types Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"object-data-type",children:"Object data type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"used for any JSON object"}),"\n",(0,s.jsx)(n.li,{children:"objects may be nested"}),"\n",(0,s.jsxs)(n.li,{children:["Mapped using the ",(0,s.jsx)(n.code,{children:"properties"})," parameter"]}),"\n",(0,s.jsxs)(n.li,{children:["Objects are not stored as objects in Apache Lucene","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Objects are transformed to ensure that we can index any valid JSON"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"nested-data-type",children:"Nested data type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Similar to the ",(0,s.jsx)(n.code,{children:"object"})," data type but maintains object relationships","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Useful when indexing arrays of objects"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Enables us to query objects independently","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Must use the ",(0,s.jsx)(n.code,{children:"nested"})," query"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nested"})," objects are stored as hidden documents"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"keyword-data-type",children:"Keyword data type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Used for exact matching of values"}),"\n",(0,s.jsx)(n.li,{children:"Used for filtering, aggregations, and sorting"}),"\n",(0,s.jsxs)(n.li,{children:["e.g. searching for articles with a status of ",(0,s.jsx)(n.code,{children:"PUBLISHED"})]}),"\n",(0,s.jsxs)(n.li,{children:["For full-text searches, use the ",(0,s.jsx)(n.code,{children:"text"})," data type instead","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"e.g. searching the body text of an article"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-the-keyword-data-type-works",children:"How the keyword data type works"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keyword"})," fields are analyzed with the ",(0,s.jsx)(n.code,{children:"keyword"})," analyzer"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"keyword"})," analyzer is a no-op analyzer","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It outputs the unmodified string as a single token"}),"\n",(0,s.jsx)(n.li,{children:"This token is placed into the inverted index"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keyword"})," fields are used for exact matching, aggregations, and sorting"]}),"\n",(0,s.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_analyze\n{\n    "text": "1 random sentence     in the air, but then the... PUPPIES :0"\n    "analyzer": "keyword"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The output will contain a single token with the text string completely untouched."})}),"\n",(0,s.jsx)(n.h2,{id:"understanding-type-coercion",children:"Understanding type coercion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Data types are inspected when indexing documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They are validated and some valid values are rejected"}),"\n",(0,s.jsxs)(n.li,{children:["e.g trying to index an object for a ",(0,s.jsx)(n.code,{children:"text"})," field"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Sometimes, providing the wrong data type is okay"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /coercion_test/_doc/1\n{\n    "price": 7.4\n}\n\nPUT /coercion_test/_doc/1\n{\n    "price": "7.4"\n}\n\nPUT /coercion_test/_doc/1\n{\n    "price": "7.4m"\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["For the second PUT, it passes in a string ",(0,s.jsx)(n.code,{children:'"7.4"'})," which does not match the type ",(0,s.jsx)(n.code,{children:"float"})," in the mapping."]}),(0,s.jsxs)(n.p,{children:["Elasticsearch will actually convert the string if it only contains numbers into the ",(0,s.jsx)(n.code,{children:"float"})," type."]}),(0,s.jsxs)(n.p,{children:["For the third PUT, it fails because the string contained a letter ",(0,s.jsx)(n.code,{children:"m"})," along with ",(0,s.jsx)(n.code,{children:"7.4"}),", so it could not be converted to ",(0,s.jsx)(n.code,{children:"float"})," type."]})]}),"\n",(0,s.jsxs)(n.h3,{id:"understanding-the-__source-object",children:["Understanding the ",(0,s.jsx)(n.code,{children:"__source"})," object"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Contains the values that were supplied at index time","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["e.g. contains ",(0,s.jsx)(n.code,{children:'"7.4"'})," and not the values that are indexed (",(0,s.jsx)(n.code,{children:"7.4"}),")"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Search queries use indexed values, not ",(0,s.jsx)(n.code,{children:"_source"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"BKD trees, inverted indices, etc"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_source"})," does not reflect how values are indexed"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Keep coercion in mind if you use values from ",(0,s.jsx)(n.code,{children:"__source"})]}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"more-on-coercion",children:"More on Coercion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Supplying a floating point for an ",(0,s.jsx)(n.code,{children:"integer"})," field will truncate it to an integer"]}),"\n",(0,s.jsxs)(n.li,{children:["Coercion is not used for dynamic mapping","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Supplying "7.4" for a new field will create a text mapping'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Always try to use the correct data type","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Especially the first time you index a field"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Coercion is enabled by default","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Could disable it"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"understanding-arrays",children:"Understanding arrays"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"There is no such things as an array data type"}),"\n",(0,s.jsxs)(n.li,{children:["Any field may contain zero or more values","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No configuration or mapping needed"}),"\n",(0,s.jsx)(n.li,{children:"Simply supply an array when indexing a document"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Constraints:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Array values should be of the same data type"}),"\n",(0,s.jsxs)(n.li,{children:["Coercion only works for fields that are already mapped","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If creating a field mapping with dynamic mapping, an array must contain the same data type."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Array Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_analyze\n{\n    "text": ["Strings are simply", "merged together."],\n    "analyzer": "standard"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Looking at the output, the multiple strings are treated as a single string and not as multiple values."})}),"\n",(0,s.jsx)(n.h3,{id:"nested-arrays",children:"Nested Arrays"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Arrays may contain nested arrays"}),"\n",(0,s.jsx)(n.li,{children:"Arrays are flattened during indexing"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"[1, [2, 3]]"})," becomes ",(0,s.jsx)(n.code,{children:"[1, 2, 3]"})]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Remember to use the ",(0,s.jsx)(n.code,{children:"nested"})," data type for arrays of objects if you need to query the objects independently."]})}),"\n",(0,s.jsx)(n.h2,{id:"adding-explicit-mappings",children:"Adding explicit mappings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /reviews\n{\n    "mappings": {\n        "properties": {\n            "rating": { "type": "float" },\n            "content": { "type": "text" },\n            "product_id": { "type": "integer" },\n            "author": {\n                "properties": {\n                    "first_name": { "type": "text" },\n                    "last_name": { "type": "text" },\n                    "email": { "type": "keyword" }\n                }\n             }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"retrieving-mappings",children:"Retrieving Mappings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"GET /reviews/_mapping\n\nGET /reviews/_mapping/field/content\n\nGET /reviews/_mapping/field/author.email\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-dot-notation-in-field-names",children:"Using dot notation in field names"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /reviews\n{\n    "mappings": {\n        //...\n\n        "author":{\n            "properties": {\n                "first_name": { "type": "text" },\n                "last_name": { "type": "text" },\n                "email": { "type": "keyword" }\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"can be converted to dot notation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /reviews\n{\n    "mappings": {\n        //...\n\n        "author.first_name": { "type": "text" },\n        "author.last_name": { "type": "text" },\n        "author.email": { "type": "keyword" }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"adding-mappings-to-existing-indices",children:"Adding mappings to existing indices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"created_at"})," timestamp custom mapping Example"]}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /reviews/_mapping\n{\n    "properties": {\n        "created_at": {\n            "type": "date"\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"how-dates-work-in-elasticsearch",children:"How dates work in Elasticsearch"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["specified in one of 3 ways","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"specially formatted strings"}),"\n",(0,s.jsxs)(n.li,{children:["ms since the epoch (",(0,s.jsx)(n.code,{children:"long"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["seconds since the epoch (",(0,s.jsx)(n.code,{children:"integer"}),")"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Epoch refers to the 1st of January 1970"}),"\n",(0,s.jsx)(n.li,{children:"Custom formats are supported"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"default-behavior-of-date-fields",children:"Default behavior of date fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["3 formats:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A date without time"}),"\n",(0,s.jsx)(n.li,{children:"A date with time"}),"\n",(0,s.jsx)(n.li,{children:"ms since the epoch"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"UTC timezone assumed if none is specified"}),"\n",(0,s.jsx)(n.li,{children:"Dates must be formatted according to the ISO 8601 spec"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"how-date-fields-are-stored",children:["How ",(0,s.jsx)(n.code,{children:"date"})," fields are stored"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stored internally as ms since the epoch"}),"\n",(0,s.jsx)(n.li,{children:"Any valid value that you supply at index time is converted to a long value internally"}),"\n",(0,s.jsx)(n.li,{children:"Dates are converted to UTC timezone"}),"\n",(0,s.jsx)(n.li,{children:"The same date conversion happens for search queries, too"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Don't provide UNIX timestamps for default date fields"})}),"\n",(0,s.jsx)(n.h2,{id:"how-missing-fields-are-handled",children:"How missing fields are handled"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All fields in Elasticsearch are optional"}),"\n",(0,s.jsx)(n.li,{children:"You can leave out a field when indexing documents"}),"\n",(0,s.jsxs)(n.li,{children:["Some integrity checks need to be done at the application level","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"e.g. have required fields"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Adding a field mapping does not make a field required"}),"\n",(0,s.jsx)(n.li,{children:"Searches automatically handle missing fields"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview-of-mapping-parameters",children:"Overview of mapping parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html",children:"Mapping Parameters"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html",children:"format documentation"})}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"format-parameter",children:[(0,s.jsx)(n.code,{children:"format"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Used to customize the format for ",(0,s.jsx)(n.code,{children:"date"})," fields","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Recommended to use default format: ",(0,s.jsx)(n.code,{children:"strict_date_optional_time||epoch_millis"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Using Java's ",(0,s.jsx)(n.code,{children:"DateFormatter"})," syntax:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["e.g. ",(0,s.jsx)(n.code,{children:'"dd/MM/yyyy"'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Using built-in formats","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['e.g. "',(0,s.jsx)(n.code,{children:"epoch_second"}),'"']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"properties-parameter",children:[(0,s.jsx)(n.code,{children:"properties"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Define nested fields for ",(0,s.jsx)(n.code,{children:"object"})," and ",(0,s.jsx)(n.code,{children:"nested"})," fields"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /sales\n{\n  "mappings": {\n    "properties": {\n      "sold_by": {\n        "properties": {\n          "name": { "type": "text" }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"coerce-parameter",children:[(0,s.jsx)(n.code,{children:"coerce"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Used to enable or diable coercion of values (enabled by default)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /sales\n{\n  "mappings": {\n    "properties": {\n      "amount": {\n        "type": "float",\n        "coerce": false\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Example of disabling coercion at the index field to not tediously add coercion to every field:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /sales\n{\n  "settings": {\n    "index.mapping.coerce": false\n  },\n  "mappings": {\n    "properties": {\n      "amount": {\n        "type": "float",\n        "coerce": true\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:['The "amount" field overwrites the index level coerce value of ',(0,s.jsx)(n.code,{children:"false"}),"."]})}),"\n",(0,s.jsxs)(n.h3,{id:"introduction-to-doc_values",children:["Introduction to ",(0,s.jsx)(n.code,{children:"doc_values"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Elasticsearch makes use of several data structures","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No single data structure serves all purposes"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Inverted indices are excellent for searching text","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They don't perform well for many other data access patterns"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:['"Doc Values" is another data structure used by Apache Lucene',"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Optimized for a different data access pattern (document --\x3e terms)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"doc_values"}),' are an "uninverted" inverted index.',"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"used for sorting, aggregations, and scripting"}),"\n",(0,s.jsx)(n.li,{children:"could be used along side inverted indices"}),"\n",(0,s.jsx)(n.li,{children:"Elasticsearch automatically queries the appropriate data structure"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"disabling-doc_values",children:["Disabling ",(0,s.jsx)(n.code,{children:"doc_values"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set the ",(0,s.jsx)(n.code,{children:"doc_values"})," parameter to ",(0,s.jsx)(n.code,{children:"false"})," to save disk space","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"slightly increases the indexing throughput"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Only disable doc values if you won't use aggregations, sorting, scripting"}),"\n",(0,s.jsx)(n.li,{children:"Particularly useful for large indices; typically not worth it for small ones"}),"\n",(0,s.jsxs)(n.li,{children:["Cannot be changed without reindexing documents into new index.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use with caution and try to anticipate how fields will be queried"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /sales\n{\n  "mappings": {\n    "properties": {\n      "buyer_email": {\n        "type": "keyword",\n        "doc_values": false\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"norms-parameter",children:[(0,s.jsx)(n.code,{children:"norms"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Normalization factors used for relevance scoring"}),"\n",(0,s.jsx)(n.li,{children:"Norms refers to the storage of various normalization factors that are used to compute relevance scores."}),"\n",(0,s.jsx)(n.li,{children:"Want to rank results as we filter them"}),"\n",(0,s.jsxs)(n.li,{children:["Norms can be disabled to save disk space","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Disable norms for fields that won't be used for relevance scoring"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /products\n{\n  "mappings": {\n    "properties": {\n      "tags": {\n        "type": "text",\n        "norms": false\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"index-parameter",children:[(0,s.jsx)(n.code,{children:"index"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Disables indexing for a field"}),"\n",(0,s.jsxs)(n.li,{children:["Values are still stored within ",(0,s.jsx)(n.code,{children:"__source"})]}),"\n",(0,s.jsx)(n.li,{children:"Useful if you won't use a field for search queries"}),"\n",(0,s.jsx)(n.li,{children:"Saves disk space and slightly improves indexing throughput"}),"\n",(0,s.jsx)(n.li,{children:"Often used for time series data"}),"\n",(0,s.jsx)(n.li,{children:"Fields with indexing disabled can still be used for aggregations"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /server-metrics\n{\n  "mappings": {\n    "properties": {\n      "server_id": {\n        "type": "integer",\n        "index": false\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"null_value-parameter",children:[(0,s.jsx)(n.code,{children:"null_value"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NULL"})," values cannot be indexed or searched"]}),"\n",(0,s.jsxs)(n.li,{children:["Use this parameter to replace ",(0,s.jsx)(n.code,{children:"NULL"})," values with another value"]}),"\n",(0,s.jsxs)(n.li,{children:["Only works for explicity ",(0,s.jsx)(n.code,{children:"NULL"})," values"]}),"\n",(0,s.jsx)(n.li,{children:"The replacement value must be of the same data type as the field"}),"\n",(0,s.jsxs)(n.li,{children:["Does not affect the value stored within ",(0,s.jsx)(n.code,{children:"__source"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /sales\n{\n  "mappings": {\n    "properties": {\n      "partner_id": {\n        "type": "keyword",\n        "null_value": "NULL"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"copy_to-parameter",children:[(0,s.jsx)(n.code,{children:"copy_to"})," parameter"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Used to copy multiple field values into a "group field"'}),"\n",(0,s.jsx)(n.li,{children:"Simply specify the name of the target field as the value"}),"\n",(0,s.jsxs)(n.li,{children:["Example: ",(0,s.jsx)(n.code,{children:"first_name"})," and ",(0,s.jsx)(n.code,{children:"last_name"})," --\x3e ",(0,s.jsx)(n.code,{children:"full_name"})]}),"\n",(0,s.jsxs)(n.li,{children:["Values are copied, not terms/tokens","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The analyzer of the target field is used for the values"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The target field is not part of ",(0,s.jsx)(n.code,{children:"__source"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /sales\n{\n  "mappings": {\n    "properties": {\n      "first_name": {\n        "type": "text",\n        "copy_to": "full_name"\n      },\n      "last_name": {\n        "type": "text",\n        "copy_to": "full_name"\n      },\n      "full_name": {\n        "type": "text"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"updating-existing-mappings",children:"Updating existing mappings"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Suppose that product IDs may now include letters"}),"\n",(0,s.jsxs)(n.li,{children:["We need to change the ",(0,s.jsx)(n.code,{children:"product_id"})," field's data type to either ",(0,s.jsx)(n.code,{children:"text"})," or ",(0,s.jsx)(n.code,{children:"keyword"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We won't use the field for full-text searches"}),"\n",(0,s.jsxs)(n.li,{children:["We will use it for filtering, so the ",(0,s.jsx)(n.code,{children:"keyword"})," data type is ideal"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"limitations-for-updating-mappings",children:"Limitations for updating mappings"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Elasticsearch field mappings cannot be changed."}),"\n",(0,s.jsx)(n.li,{children:"Could add new field mappings"}),"\n",(0,s.jsx)(n.li,{children:"A few mapping parameters could be updated for existing mappings"}),"\n",(0,s.jsxs)(n.li,{children:["Being able to update mappings would be problematic for existing documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Text values have already been analyzed, for instance"}),"\n",(0,s.jsx)(n.li,{children:"Changing between some data types would require rebuilding the whole data structure"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Even for an empty index, we cannot update a mapping"}),"\n",(0,s.jsxs)(n.li,{children:["Field mappings cannot be removed","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Just leave out the field when indexing documents"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"The Update By Query API can be used to reclaim disk space"}),"\n",(0,s.jsx)(n.li,{children:"The solution is to reindex documents into a new index"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"reindexing-documents-with-the-reindex-api",children:"Reindexing documents with the Reindex API"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html",children:"Reindex API"})," moves documents from one index to another so that we don't have to"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews"\n  },\n  "dest": {\n    "index": "reviews_new"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"__source-data-types",children:[(0,s.jsx)(n.code,{children:"__source"})," data types"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The data type doesn't reflect how the values are indexed"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__source"})," contains the field values supplied at index time"]}),"\n",(0,s.jsxs)(n.li,{children:["It's common to use ",(0,s.jsx)(n.code,{children:"__source"})," values from search results","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["expect a string for a ",(0,s.jsx)(n.code,{children:"keyword"})," field"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["modify the ",(0,s.jsx)(n.code,{children:"__source"})," value while reindexing"]}),"\n",(0,s.jsx)(n.li,{children:"Can be handled at the application level"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews"\n  },\n  "dest": {\n    "index": "reviews_new"\n  },\n  "script": """\n    if(ctx.__source.product_id != null) {\n      ctx._source.product_id = ctx._source.product_id.toString();\n    }\n  """\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"reindex-documents-matching-a-query",children:"Reindex documents matching a query"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews",\n    "query": {\n      "match_all": { }\n    }\n  },\n  "dest": {\n    "index": "reviews_new"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:'The above code specifies a query within the "source" parameter to only reindex documents that match the query.'})}),"\n",(0,s.jsx)(n.h3,{id:"reindex-only-positive-reviews",children:"Reindex only positive reviews"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews",\n    "query": {\n      "range": {\n        "rating": {\n          "gte": 4.0\n        }\n      }\n    }\n  },\n  "dest": {\n    "index": "reviews_new"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"removing-fields",children:"Removing fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Field mappings cannot be deleted"}),"\n",(0,s.jsx)(n.li,{children:"Fields can be left out when indexing documents"}),"\n",(0,s.jsxs)(n.li,{children:["Maybe we want to reclaim disk space used by a field","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Already indexed values still take up disk space"}),"\n",(0,s.jsxs)(n.li,{children:["For large data sets, this may be worthwhile","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Assuming that we no longer need the values"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews",\n    "__source": ["content", "created_at", "rating"]\n  },\n  "dest": {\n    "index": "reviews_new"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"By specifying an array of field names, only those fields are included for each document when they are indexed into the destination index."}),"\n",(0,s.jsx)(n.li,{children:"In other words, any fields that you leave out will not be reindexed."}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"changing-a-fields-name",children:"Changing a field's name"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews",\n  },\n  "dest": {\n    "index": "reviews_new"\n  },\n  "script": {\n    "source": """\n    # Rename "content" field to "comment"\n    ctx.__source.comment = ctx.__source.remove("content");\n    """\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Example: Ignore reviews with ratings below 4.0"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex\n{\n  "source": {\n    "index": "reviews",\n  },\n  "dest": {\n    "index": "reviews_new"\n  },\n  "script": {\n    "source": """\n      if(ctx.__source.rating < 4.0){\n        ctx.op = "noop" # can also be set to "delete"\n      }\n    """\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:'"noop"'})," value, the document will not be indexed into the destination index."]})}),"\n",(0,s.jsxs)(n.h3,{id:"using-ctxop-within-scripts",children:["Using ",(0,s.jsx)(n.code,{children:"ctx.op"})," within scripts"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Usually, using the ",(0,s.jsx)(n.code,{children:"query"})," parameter is possible"]}),"\n",(0,s.jsxs)(n.li,{children:["For more advanced use cases, ",(0,s.jsx)(n.code,{children:"ctx.op"})," can be used"]}),"\n",(0,s.jsx)(n.li,{children:"Using the query parameter is better performance wise and is preferred"}),"\n",(0,s.jsxs)(n.li,{children:["Specifying ",(0,s.jsx)(n.code,{children:'"delete"'})," deletes the document within the destination index","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The destination index might not be empty as in our example"}),"\n",(0,s.jsx)(n.li,{children:"The same can be done with the Delete by Query API"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-for-the-reindex-api",children:"Parameters for the Reindex API"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A snapshot is created before reindexing documents"}),"\n",(0,s.jsx)(n.li,{children:"A version conflict causes the query to be aborted by default"}),"\n",(0,s.jsx)(n.li,{children:"The destination index is not empty"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"batching--throttling",children:"Batching & Throttling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The Reindex API performs operations in batches","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Similar to the Update by Query and Delete by Query Applies"}),"\n",(0,s.jsx)(n.li,{children:"It uses the Scroll API internally"}),"\n",(0,s.jsx)(n.li,{children:"This is how millions of documents can be reindexed efficiently"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Throttling can be configured to limit the performance impact","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Useful for production clusters"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"defining-field-aliases",children:"Defining field aliases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Field names can be changed when reindexing documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Not worth it for lots of document"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Alternative: use ",(0,s.jsx)(n.strong,{children:"field aliases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Doesn't require documents to be reindexed"}),"\n",(0,s.jsx)(n.li,{children:"Aliases can be used within queries"}),"\n",(0,s.jsx)(n.li,{children:"Aliases are defined with a field mapping"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'POST /_reindex/_mapping\n{\n  "properties": {\n    "comment": {\n      "type": "alias",\n      "path": "content"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"updating-field-aliases",children:"Updating field aliases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Field Aliases could be updated","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only its target field though"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Simply perform a mapping update with a new path value"}),"\n",(0,s.jsxs)(n.li,{children:["Possible because aliases don't affect indexing","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It's a query-level construct"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"index-aliases",children:"Index Aliases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Elasticsearch also supports Index Aliases"}),"\n",(0,s.jsx)(n.li,{children:"Used when dealing with large data volumes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"multi-field-mappings",children:"Multi-field mappings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /multi_field_test\n{\n  "mappings": {\n    "properties":{\n      "description": {\n        "type": "text"\n      },\n      "ingredients": {\n        "type": "text",\n        "fields": {\n          "keyword": {\n            "type": "keyword"\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"index-templates",children:"Index Templates"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html",children:"Index Templates API"})}),"\n",(0,s.jsxs)(n.li,{children:["A way to automatically apply settings and mappings on index creation","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Works by matching index names against an ",(0,s.jsx)(n.strong,{children:"index pattern"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Only a single index template can be applied to a new index"}),"\n",(0,s.jsxs)(n.li,{children:["Used for data sets that are stored in multiple indices","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"e.g time series data"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Enables us to simply index documents into indices that don't already existing"}),"\n",(0,s.jsxs)(n.li,{children:["Indices can be created manually","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"API request and index templates are merged (the request takes precedence)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"structure-of-index-templates",children:"Structure of index Templates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /_index_template/my-index-template\n{\n  "index_patterns": ["my-index-pattern*"],\n  "template": {\n    "settings": { ... },\n    "mappings": { ... }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PUT /_index_template/my-index-template"})," is the name of the index template"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"index_patterns": ["my-index-pattern*"]'})," is a pattern that determines when the index template is applied"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"settings": { ... },'})," is settings to apply to the new index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"mappings": { ... }'})," is field mappings to add to the new index"]}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"priorities",children:"Priorities"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Index patterns cannot overlap by default"}),"\n",(0,s.jsx)(n.li,{children:"Only a single index template can be applied to a new index"}),"\n",(0,s.jsxs)(n.li,{children:["Specify a ",(0,s.jsx)(n.code,{children:"priority"})," paramter to handle overlapping index patterns","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Defaults to zero"}),"\n",(0,s.jsx)(n.li,{children:'The index template with the highest priority "wins"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-dynamic-mapping",children:"Introduction to dynamic mapping"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["JSON ",(0,s.jsx)(n.code,{children:"String"})," --\x3e Elasticsearch (",(0,s.jsx)(n.code,{children:"text"})," field with ",(0,s.jsx)(n.code,{children:"keyword"})," mapping, ",(0,s.jsx)(n.code,{children:"date"})," field, ",(0,s.jsx)(n.code,{children:"float"})," field or ",(0,s.jsx)(n.code,{children:"long"})," field)"]}),"\n",(0,s.jsxs)(n.li,{children:["JSON ",(0,s.jsx)(n.code,{children:"Integer"})," --\x3e Elasticsearch ",(0,s.jsx)(n.code,{children:"long"})]}),"\n",(0,s.jsxs)(n.li,{children:["JSON ",(0,s.jsx)(n.code,{children:"Floating point"})," number --\x3e Elasticsearch ",(0,s.jsx)(n.code,{children:"float"})]}),"\n",(0,s.jsxs)(n.li,{children:["JSON ",(0,s.jsx)(n.code,{children:"array"})," --\x3e Depends on the first non-null value"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuring-dynamic-mapping",children:"Configuring dynamic mapping"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /people\n{\n  "mappings": {\n    "dynamic": false,\n    "properties": {\n      "first_name": {\n        "type": "text"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"setting-dynamic-to-false",children:["Setting ",(0,s.jsx)(n.code,{children:"dynamic"})," to ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["New fields are ignored","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["They are not indexed, but still part of ",(0,s.jsx)(n.code,{children:"__source"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["No inverted index is created for the ",(0,s.jsx)(n.code,{children:"last_name"})," field","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Querying the field gives no results"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Fields cannot be indexed without a mapping","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When enabled, dynamic mapping creates one before indexing values"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"setting-dynamic-to-strict",children:["Setting ",(0,s.jsx)(n.code,{children:"dynamic"})," to ",(0,s.jsx)(n.code,{children:"strict"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Elasticsearch will reject unmapped fields","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All fields must be mapped explicitly"}),"\n",(0,s.jsx)(n.li,{children:"Similar behavior as relational databases"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /people\n{\n  "mappings": {\n    "dynamic": false,\n    "properties": {\n      "first_name": {\n        "type": "text"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"numeric-detection",children:"Numeric Detection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /computers\n{\n  "mappings": {\n    "numeric_detection": true\n  }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"When adding a doc, if the field values are string versions of numbers, dynamic mapping will set values to long or float."})}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-templates",children:"Dynamic Templates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /dynamic_template_test\n{\n  "mappings": {\n    "dynamic_templates": [\n      "integer": {\n        "match_mapping_type": "long",\n        "mapping": {\n          "type": "integer"\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"match-and-unmatch-parameters",children:[(0,s.jsx)(n.code,{children:"match"})," and ",(0,s.jsx)(n.code,{children:"unmatch"})," parameters"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"used to specify conditions for field names"}),"\n",(0,s.jsxs)(n.li,{children:["Field names must match the condition specified by the ",(0,s.jsx)(n.code,{children:"match"})," parameter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unmatch"})," is used to exclude fields that were matched by the ",(0,s.jsx)(n.code,{children:"match"})," parameter"]}),"\n",(0,s.jsx)(n.li,{children:"Both parameters support patterns with wildcards(*)"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"path_match-and-path_unmatch-parameters",children:[(0,s.jsx)(n.code,{children:"path_match"})," and ",(0,s.jsx)(n.code,{children:"path_unmatch"})," parameters"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["These parameters evaluate the full field path","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"i.e. not just the field names"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["dot notation","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"name.first_name"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"wildcards are supported"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"index-templates-vs-dynamic-templates",children:"Index templates vs dynamic templates"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Index templates apply mappings and index settings for matching indices","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This happens when indices are created and their names match a pattern"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Dynamic templates are evaluated when new fields are encountered","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"and dynamic mapping is enabled"}),"\n",(0,s.jsx)(n.li,{children:"The specified field mapping is added if the templates conditions match"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Index templates define fixed mappings; dynamic templates are dynamic"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"mapping-recommendations",children:"Mapping Recommendations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Dynamic mapping is convenient, but not good for production"}),"\n",(0,s.jsxs)(n.li,{children:["Use explicit mappings","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Save disk space with optimized mappings with storing many documents"}),"\n",(0,s.jsxs)(n.li,{children:["set ",(0,s.jsx)(n.code,{children:"dynamic"})," to ",(0,s.jsx)(n.code,{children:"strict"}),", not ",(0,s.jsx)(n.code,{children:"false"}),", to avoid surprises and unexpected results"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"mapping-of-text-fields",children:"Mapping of text fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Don't always map strings as both ",(0,s.jsx)(n.code,{children:"text"})," and ",(0,s.jsx)(n.code,{children:"keyword"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Typically only one is needed"}),"\n",(0,s.jsx)(n.li,{children:"Each mapping requires disk space"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Do you need to perform full-text searches?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Add a ",(0,s.jsx)(n.code,{children:"text"})," mapping"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Do you need to do aggregations, sorting, or filtering on exact values?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Add a ",(0,s.jsx)(n.code,{children:"keyword"})," mapping"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"disable-coercion",children:"Disable Coercion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Coercion forgives you for doing the wrong thing"}),"\n",(0,s.jsxs)(n.li,{children:["Do things correctly instead","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Always use the correct data types"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-appropriate-numeric-data-types",children:"Use appropriate numeric data types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For whole numbers, the ",(0,s.jsx)(n.code,{children:"integer"})," data type might be enough","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"long"})," can store larger numbers, but also uses more disk space"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["For decimal numbers, the ",(0,s.jsx)(n.code,{children:"float"})," data type might be precise enough","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"double"})," stores numbers with a higher precision but uses 2x disk space"]}),"\n",(0,s.jsxs)(n.li,{children:["Usually, ",(0,s.jsx)(n.code,{children:"float"})," provides enough precision"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"mapping-parameters",children:"Mapping parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"doc_values"})," to ",(0,s.jsx)(n.code,{children:"false"})," if you don't need sorting, aggregations, and scripting"]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"norms"})," to ",(0,s.jsx)(n.code,{children:"false"})," if you don't need relevance scoring"]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"index"})," to ",(0,s.jsx)(n.code,{children:"false"})," fi you don't need to filter on values","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can still do aggregations (e.g. for time series data)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Only worth the effort when storing lots of documents"}),"\n",(0,s.jsx)(n.li,{children:"Worse case scenario, need to reindex documents"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"stemming--stop-words",children:"Stemming & Stop words"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stemming"})," reduces words to their root format","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["e.g. ",(0,s.jsx)(n.code,{children:"loved"})," --\x3e ",(0,s.jsx)(n.code,{children:"love"})]}),"\n",(0,s.jsxs)(n.li,{children:["e.g. ",(0,s.jsx)(n.code,{children:"drinking"})," --\x3e ",(0,s.jsx)(n.code,{children:"drink"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stop Words"}),": words that are filtered out during text analysis","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Common words such as "a", "the", "at", "of", "on", etc.'}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"They provide little to no value for relevance scoring"}),"\n",(0,s.jsx)(n.li,{children:"Fairly common to remove such words"}),"\n",(0,s.jsx)(n.li,{children:"Not removed by default, and generally not recommended to do so"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-analyzers",children:"Built-in Analyzers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html",children:"Built-in Analyzers Docs"})}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The main example we will be looking at is:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"Is that Peter\'s cute-looking dog?"\n'})})]}),"\n",(0,s.jsxs)(n.h3,{id:"standard-analyzer",children:[(0,s.jsx)(n.code,{children:"standard"})," analyzer"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Splits text at word boundaries and removes punctuation","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Done by the ",(0,s.jsx)(n.code,{children:"standard"})," tokenizer"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Lowercases letters with the ",(0,s.jsx)(n.code,{children:"lowercase"})," token filter"]}),"\n",(0,s.jsxs)(n.li,{children:["Contains the ",(0,s.jsx)(n.code,{children:"stop"})," token filter (disabled by default)"]}),"\n",(0,s.jsx)(n.li,{children:"Example after standard analyzer:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["is", "that", "peter\'s", "cute", "looking", "dog"]\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"simple-analyzer",children:[(0,s.jsx)(n.code,{children:"simple"})," analyzer"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["similar to the ",(0,s.jsx)(n.code,{children:"standard"})," analyzer","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"splits into tokens when encountering anything else than letters"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Lowercases letters with the ",(0,s.jsx)(n.code,{children:"lowercase"})," tokenizer","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unusual and a performance hack"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Example after simple analyzer:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["is", "that", "peter", "s", "cute", "looking", "dog"]\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"whitespace-analyzer",children:[(0,s.jsx)(n.code,{children:"whitespace"})," analyzer"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Splits text into tokens by whitespace"}),"\n",(0,s.jsx)(n.li,{children:"Does not lowercase letters"}),"\n",(0,s.jsx)(n.li,{children:"Example after whitespace analyzer:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["Is", "that", "Peter\'s", "cute-looking", "dog?"]\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"keyword-analyzer",children:[(0,s.jsx)(n.code,{children:"keyword"})," analyzer"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["No-op analyzer that leaves the input text intact","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"outputs it as a single token"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Used for ",(0,s.jsx)(n.code,{children:"keyword"})," fields by default","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Used for exact matching"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Example after keyword analyzer:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["Is that Peter\'s cute-looking dog?"]\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"pattern-analyzer",children:[(0,s.jsx)(n.code,{children:"pattern"})," analyzer"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A regular expression is used to match token separators","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It should match whatever should split the text into tokens"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"This analyzer is very flexible"}),"\n",(0,s.jsx)(n.li,{children:"The default pattern matches all non-word characters (\\W+)"}),"\n",(0,s.jsx)(n.li,{children:"Lowercases letters by default"}),"\n",(0,s.jsx)(n.li,{children:"Example after pattern analyzer"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["is", "that", "peter", "s", "cute", "looking", "dog"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"custom-analyzers",children:"Custom Analyzers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html",children:"Text Analysis Docs"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'PUT /analyzer_test\n{\n  "settings": {\n    "analysis": {\n      "analyzer": {\n        "my_custom_analyzer": {\n          "type": "custom",\n          "char_filter": ["html_strip"],\n          "tokenizer": "standard",\n          "filter": [\n            "lowercase",\n            "stop",\n            "asciifolding"\n          ]\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"adding-analyzers-to-existing-indices",children:"Adding Analyzers to existing indices"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'// Any attempt to search or index documents will be refused\n// while the index is in the closed state\nPUT /analyzer_test/_close\n\nPUT /analyzer_test/_settings\n{\n  "analysis": {\n      "analyzer": {\n        "my_second_analyzer": {\n          "type": "custom",\n          "char_filter": ["html_strip"],\n          "tokenizer": "standard",\n          "filter": [\n            "lowercase",\n            "stop",\n            "asciifolding"\n          ]\n        }\n      }\n  }\n}\n\n// the index is in the open state\n// now able to use the analyzer within field mappings\nPUT /analyzer_test/_open\n'})}),"\n",(0,s.jsx)(n.h3,{id:"open--closed-indices",children:"Open & Closed Indices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An open index is available for indexing and search requests"}),"\n",(0,s.jsxs)(n.li,{children:["A closed index will refuse requests","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Read and write requests are blocked"}),"\n",(0,s.jsx)(n.li,{children:"Necessary for performing some operations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-and-static-settings",children:"Dynamic and static settings"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Dynamic settings can be changed without closing the index first","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requires no downtime"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Static settings require the index to be closed first","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The index will be briefly unavailable"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Analysis settings are static settings"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"opening--closing-indices",children:"Opening & closing indices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Fairly quick, but might not be an option for production clusters","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"E.g. mission critical systems where downtime is unacceptable"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Alternatively reindex documents into a new index","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create the new index with the updated settings"}),"\n",(0,s.jsx)(n.li,{children:"Use an index alias for the transition"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"updating-analyzers",children:"Updating Analyzers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Analyzers can be updated"}),"\n",(0,s.jsxs)(n.li,{children:["Pay attention to existing documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They were analyzed using the old version of the analyzer"}),"\n",(0,s.jsx)(n.li,{children:"Reindex these documents to avoid headaches"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Try to get analyzers right before indexing documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Update By Query API to reindex values"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var s=i(6540);const l={},d=s.createContext(l);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);