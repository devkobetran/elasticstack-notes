"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[2810],{7163:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>o,frontMatter:()=>l,metadata:()=>t,toc:()=>a});var i=s(4848),r=s(8453);const l={sidebar_position:3},c="Searching for Data",t={id:"tutorial/searching-for-data",title:"Searching for Data",description:"Introduction to searching",source:"@site/docs/tutorial/searching-for-data.md",sourceDirName:"tutorial",slug:"/tutorial/searching-for-data",permalink:"/elasticstack-notes/docs/tutorial/searching-for-data",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/elasticstack-notes/docs/tutorial/searching-for-data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Mapping and Analysis",permalink:"/elasticstack-notes/docs/tutorial/mapping-and-analysis"},next:{title:"Joining Queries",permalink:"/elasticstack-notes/docs/tutorial/joining-queries"}},d={},a=[{value:"Introduction to searching",id:"introduction-to-searching",level:2},{value:"Introduction to term level queries",id:"introduction-to-term-level-queries",level:2},{value:"Searching for terms",id:"searching-for-terms",level:2},{value:"Retrieving documents by IDs",id:"retrieving-documents-by-ids",level:2},{value:"Range Searches",id:"range-searches",level:2},{value:"Querying Numeric Ranges",id:"querying-numeric-ranges",level:3},{value:"Querying Dates with timestamps",id:"querying-dates-with-timestamps",level:3},{value:"Prefixes, wildcards, &amp; regular expressions",id:"prefixes-wildcards--regular-expressions",level:2},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Querying by field existence",id:"querying-by-field-existence",level:2},{value:"Reasons for no indexed value",id:"reasons-for-no-indexed-value",level:3},{value:"Inverting the query",id:"inverting-the-query",level:3},{value:"Introduction to full text queries",id:"introduction-to-full-text-queries",level:2},{value:"Full text queries vs term level queries",id:"full-text-queries-vs-term-level-queries",level:3},{value:"The <code>match</code> query",id:"the-match-query",level:2},{value:"Introduction to relevance scoring",id:"introduction-to-relevance-scoring",level:2},{value:"Searching Multiple Fields",id:"searching-multiple-fields",level:2},{value:"Specifying a tie breaker",id:"specifying-a-tie-breaker",level:3},{value:"Phrase searches",id:"phrase-searches",level:2},{value:"Leaf and compound queries",id:"leaf-and-compound-queries",level:2},{value:"Querying with boolean logic",id:"querying-with-boolean-logic",level:2},{value:"The <code>must</code> occurrence type",id:"the-must-occurrence-type",level:3},{value:"The <code>must_not</code> occurrence type",id:"the-must_not-occurrence-type",level:3},{value:"Important things about <code>should</code>",id:"important-things-about-should",level:3},{value:"The <code>filter</code> occurrence type",id:"the-filter-occurrence-type",level:3},{value:"Query execution contexts",id:"query-execution-contexts",level:2},{value:"Filter execution context",id:"filter-execution-context",level:3},{value:"Changing the execution context",id:"changing-the-execution-context",level:3},{value:"<code>boosting</code> Query",id:"boosting-query",level:2},{value:"Disjunction max (<code>dis_max</code>)",id:"disjunction-max-dis_max",level:2},{value:"dis_max query",id:"dis_max-query",level:3},{value:"Querying nested objects",id:"querying-nested-objects",level:2},{value:"How documents are stored",id:"how-documents-are-stored",level:3},{value:"Nested inner hits",id:"nested-inner-hits",level:2},{value:"Nested fields limitations",id:"nested-fields-limitations",level:2},{value:"Performance",id:"performance",level:3},{value:"Limitations",id:"limitations",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"searching-for-data",children:"Searching for Data"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-searching",children:"Introduction to searching"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There are two ways of searching;"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request URI"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Search queries are added to the URL"}),"\n",(0,i.jsx)(n.li,{children:"Uses Apache Lucene\u2019s query syntax"}),"\n",(0,i.jsx)(n.li,{children:"Only supports relatively simple queries"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Query DSL"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Search queries are defined as JSON within the request body"}),"\n",(0,i.jsx)(n.li,{children:"More verbose, but supports all features"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Query DSL Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "match_all": {}\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-term-level-queries",children:"Introduction to term level queries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["One group of Elasticsearch queries is called ",(0,i.jsx)(n.strong,{children:"term level queries"})]}),"\n",(0,i.jsxs)(n.li,{children:["Used to search structured data for exact values (filtering)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'E.g. finding products where the brand equals "Nike"'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Term level queries are not analyzed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The search value is used exactly as is for inverted index lookups"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Can be used with data types such as ",(0,i.jsx)(n.strong,{children:"keyword"}),", numbers, dates, etc."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Term level queries are case sensitive"})}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsxs)(n.p,{children:["Just don\u2019t use term level queries for ",(0,i.jsx)(n.strong,{children:"text"})," fields!"]}),(0,i.jsx)(n.p,{children:"e.g A query for \u201cnike\u201d works fine, but \u201cNike\u201d doesn\u2019t match anything"})]}),"\n",(0,i.jsx)(n.h2,{id:"searching-for-terms",children:"Searching for terms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"One of the most important search queries in Elasticsearch"}),"\n",(0,i.jsx)(n.li,{children:"Used to query several different data types"}),"\n",(0,i.jsxs)(n.li,{children:["Text values (",(0,i.jsx)(n.code,{children:"keyword"})," only!), numbers, dates, booleans, ..."]}),"\n",(0,i.jsxs)(n.li,{children:["Case sensitive by default","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"case_insensitive"})," parameter was added in v7.1.0"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"terms"})," query to search for multiple terms"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "term": {\n            "tags.keyword": "Vegetable"\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Parameter that allows to perform case insensitive searches"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "term": {\n            "tags.keyword": "Vegetable",\n            "case_insensitive": true\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Search for multiple items"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "terms": {\n            "tags.keyword": ["Soup", "Meat"]\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"retrieving-documents-by-ids",children:"Retrieving documents by IDs"}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "ids": {\n            "values": ["100", "200", "300"]\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"is equivalent to this in SQL:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'SELECT * FROM products WHERE _id IN ("100", "200", "300");'})}),"\n",(0,i.jsx)(n.h2,{id:"range-searches",children:"Range Searches"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"range"})," query is used to perform range searches"]}),"\n",(0,i.jsxs)(n.li,{children:["E.g. ",(0,i.jsx)(n.code,{children:"in_stock >= 1"})," and ",(0,i.jsx)(n.code,{children:"in_stock <= 5"})]}),"\n",(0,i.jsxs)(n.li,{children:["E.g. ",(0,i.jsx)(n.code,{children:"created >= 2020/01/01"})," and ",(0,i.jsx)(n.code,{children:"created <= 2020/01/31"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"querying-numeric-ranges",children:"Querying Numeric Ranges"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Products that are almost sold out example"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "range": {\n            "in_stock": {\n                "gte": 1,\n                "lte": 5\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"is equivalent to this in SQL:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"WHERE in_stock >= 1 AND in_stock <= 5"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Boundaries not included"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "range": {\n            "in_stock": {\n                "gt": 1,\n                "lt": 5\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"is equivalent to this in SQL:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"WHERE in_stock > 1 AND in_stock < 5"})}),"\n",(0,i.jsx)(n.h3,{id:"querying-dates-with-timestamps",children:"Querying Dates with timestamps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"range"})," query to perform range searches"]}),"\n",(0,i.jsxs)(n.li,{children:["Specify one or more of the ",(0,i.jsx)(n.code,{children:"gt"}),", ",(0,i.jsx)(n.code,{children:"gte"}),", ",(0,i.jsx)(n.code,{children:"lt"}),", or ",(0,i.jsx)(n.code,{children:"lte"})," parameters"]}),"\n",(0,i.jsx)(n.li,{children:"Supports both numbers and dates"}),"\n",(0,i.jsxs)(n.li,{children:["Dates are automatically handled for ",(0,i.jsx)(n.code,{children:"date"})," fields","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Specifying the time is optional, but recommended if possible"}),"\n",(0,i.jsxs)(n.li,{children:["Custom formats are supported through the ",(0,i.jsx)(n.code,{children:"format"})," parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["Time zones are handled with the ",(0,i.jsx)(n.code,{children:"time_zone"})," parameter (UTC offset)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "range": {\n            "created": {\n                "time_zone": "+01:00",\n                "format": "yyyy/MM/dd",\n                "gte": "2020/01/01 00:00:00",\n                "lte": "2020/01/31 23:59:59"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"prefixes-wildcards--regular-expressions",children:"Prefixes, wildcards, & regular expressions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Term level queries are used for exact matching","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Query non-analyzed values with queries that are not analyzed"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["There are a few exceptions","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Querying by prefix, wildcards, and regular expressions"}),"\n",(0,i.jsxs)(n.li,{children:["Remember to still query ",(0,i.jsx)(n.code,{children:"keyword"})," fields"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"prefix"})," query matches terms that begin with a prefix"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"wildcard"})," query enables us to use wildcards"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"?"})," to match any single character"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*"})," to match any number of characters (",(0,i.jsx)(n.code,{children:"0-N"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Avoid placing wildcards at the beginning of patterns if at all possible"}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:'"case_insensitive": true'})," parameter to ignore letter casing"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Querying by prefix Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "prefix": {\n            "name.keyword": {\n                "value": "Past"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Querying by wildcard Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "prefix": {\n            "name.keyword": {\n                "value": "Past?"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Querying by wildcard Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "prefix": {\n            "name.keyword": {\n                "value": "Bee*"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"regular-expressions",children:"Regular Expressions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"regexp"})," query matches terms that match a regular expression"]}),"\n",(0,i.jsx)(n.li,{children:"Regular expressions are patterns used for matching strings"}),"\n",(0,i.jsxs)(n.li,{children:["Allows more complex queries than the ",(0,i.jsx)(n.code,{children:"wildcard"})," query"]}),"\n",(0,i.jsx)(n.li,{children:"The whole term must be matched"}),"\n",(0,i.jsxs)(n.li,{children:["Uses Apache Lucene regex engine (",(0,i.jsx)(n.code,{children:"^"})," and ",(0,i.jsx)(n.code,{children:"$"})," anchors not supported)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"querying-by-field-existence",children:"Querying by field existence"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"exists"})," query matches fields that have an indexed value"]}),"\n",(0,i.jsx)(n.li,{children:"Field values are only indexed if they are considered non-empty"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "exists": {\n            "field": "tags.keyword"\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reasons-for-no-indexed-value",children:"Reasons for no indexed value"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Empty value provided (",(0,i.jsx)(n.code,{children:"NULL"})," or ",(0,i.jsx)(n.code,{children:"[]"}),")","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"null_value"})," parameter is an exception for ",(0,i.jsx)(n.code,{children:"NULL"})," values"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"No value was provided for the field"}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"index"})," mapping parameter is set to ",(0,i.jsx)(n.code,{children:"false"})," for the field"]}),"\n",(0,i.jsxs)(n.li,{children:["The value\u2019s length is greater than the ",(0,i.jsx)(n.code,{children:"ignore_above"})," parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["Malformed value with the ",(0,i.jsx)(n.code,{children:"ignore_malformed"})," mapping parameter set to ",(0,i.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"inverting-the-query",children:"Inverting the query"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"exists"})," query can be inverted by using the ",(0,i.jsx)(n.code,{children:"bool"})," query\u2019s ",(0,i.jsx)(n.code,{children:"must_not"})," occurrence type"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "bool": {\n            "must_not": [\n                {\n                    "exists": {\n                        "field": "tags.keyword"\n                    }\n                }\n            ]\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"is equivalent to in SQL:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"SELECT * FROM products WHERE tags is NULL"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-full-text-queries",children:"Introduction to full text queries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Term level queries are used for exact matching on structured data"}),"\n",(0,i.jsxs)(n.li,{children:["Full text queries are used for searching unstructured text data","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"E.g. website content, news articles, emails, chats, transcripts, etc."}),"\n",(0,i.jsx)(n.li,{children:"Often used for long texts"}),"\n",(0,i.jsx)(n.li,{children:"We don\u2019t know which values a field may contain (hence \u201cunstructured\u201d)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Full text queries are not used for exact matching","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"They match values that include a term, often being one of many"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"Full text queries are analyzed with the field mapping's analyzer."}),(0,i.jsx)(n.p,{children:"The resulting term is used for a loopup within the inverted index."})]}),"\n",(0,i.jsx)(n.h3,{id:"full-text-queries-vs-term-level-queries",children:"Full text queries vs term level queries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The main difference is that full text queries are analyzed","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Term level queries aren\u2019t and are therefore used for exact matching"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Don\u2019t use full text queries on ",(0,i.jsx)(n.code,{children:"keyword"})," fields because the field values were not analyzed during indexing","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"That compares analyzed values with non-analyzed values"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsxs)(n.h2,{id:"the-match-query",children:["The ",(0,i.jsx)(n.code,{children:"match"})," query"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"match"})," query is a fundamental query in Elasticsearch"]}),"\n",(0,i.jsx)(n.li,{children:"The most widely used full text query"}),"\n",(0,i.jsx)(n.li,{children:"Powerful & flexible when using advanced parameters"}),"\n",(0,i.jsxs)(n.li,{children:["Supports most data types (e.g. dates and numbers)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Recommendation: Use term level queries if you know the input value"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If the analyzer outputs multiple terms, at least one must match by default","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This can be changed by setting the ",(0,i.jsx)(n.code,{children:"operator"})," parameter to ",(0,i.jsx)(n.code,{children:'"and"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Matches documents that contain one or more of the specified terms"}),"\n",(0,i.jsx)(n.li,{children:"The search term is analyzed and the result is looked up in the field\u2019s\ninverted index"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "match": {\n            "name": "PASTA CHICKEN"\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'"PASTA CHICKEN"'})," --ANALYZER--\x3e ",(0,i.jsx)(n.code,{children:'["pasta", "chicken"]'})," --\x3e ",(0,i.jsx)(n.code,{children:'"pasta"'})," OR ",(0,i.jsx)(n.code,{children:'"chicken"'})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Explicitly say pasta AND chicken Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "match": {\n            "name": "PASTA CHICKEN"\n            "operator": "AND"\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-relevance-scoring",children:"Introduction to relevance scoring"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Query results are sorted descendingly by the _score metadata field","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A floating point number of how well a document matches a query"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Documents matching term level queries are generally scored 1.0","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Either a document matches, or it doesn\u2019t (simply filtered out)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Full text queries are not for exact matching","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How well a document matches is now a factor"}),"\n",(0,i.jsx)(n.li,{children:"The most relevant results are placed highest (e.g. like on Google)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"searching-multiple-fields",children:"Searching Multiple Fields"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html",children:"Multi-match Query"})}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"multi_match"})," query performs full text searches on multiple fields","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A document matches if at least one field is matched"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Individual fields can be relevance boosted by modifying the field name (^)"}),"\n",(0,i.jsx)(n.li,{children:"Internally, Elasticsearch rewrites the query to simplify things for us"}),"\n",(0,i.jsxs)(n.li,{children:["By default, the best matching field\u2019s relevance score is used for the document","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can be configured with the ",(0,i.jsx)(n.code,{children:"type"})," parameter"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "multi-match": {\n            "query": "vegetable"\n            "fields": ["name", "tags"]\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Relevance Boost Documents"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "multi-match": {\n            "query": "vegetable"\n            "fields": ["name^2", "tags"]\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"specifying-a-tie-breaker",children:"Specifying a tie breaker"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"By default, one field is used for calculating a document\u2019s relevance score"}),"\n",(0,i.jsxs)(n.li,{children:["We can \u201creward\u201d documents where multiple fields match with the ",(0,i.jsx)(n.code,{children:"tie_breaker"})," parameter","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each matching field affects the relevance score"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"phrase-searches",children:"Phrase searches"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"match_phrase"})," query is similar to the ",(0,i.jsx)(n.code,{children:"match"})," query in some ways"]}),"\n",(0,i.jsxs)(n.li,{children:["For the ",(0,i.jsx)(n.code,{children:"match_phrase"})," query, the position (and thereby order) of terms matters"]}),"\n",(0,i.jsx)(n.li,{children:"Terms must appear in the correct order and with no other terms in-between"}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"standard"})," analyzer\u2019s tokenizer outputs term positions that are stored\nwithin the field\u2019s inverted index","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"These positions are then used for phrase searches (among others)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "match-phrase": {\n            "description": "Elasticsearch guide"\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"leaf-and-compound-queries",children:"Leaf and compound queries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Leaf queries"})," search for values and are independent queries","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["e.g. the ",(0,i.jsx)(n.code,{children:"term"})," and ",(0,i.jsx)(n.code,{children:"match"})," queries"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Compound queries wrap ",(0,i.jsx)(n.code,{children:"other"})," queries to produce a result"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"querying-with-boolean-logic",children:"Querying with boolean logic"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html",children:"Boolean query"})}),"\n",(0,i.jsx)(n.li,{children:"match queries are usually translated into bool queries internally"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "bool": {\n            "must": [\n                {\n                    "term": {\n                        "tag.keyboard": "Alcohol"\n                    }\n                }\n            ],\n            "must_not": [\n                {\n                    "term": {\n                        "tags.keyword": "Wine"\n                    }\n                }\n            ],\n            "should": [\n                {\n                "term": {\n                        "tags.keyword": "Beer"\n                    }\n                },\n                {\n                    "match": {\n                        "name": "beer"\n                    }\n                },\n                {\n                    "match": {\n                        "description": "beer"\n                    }\n                }\n\n            ]\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"the-must-occurrence-type",children:["The ",(0,i.jsx)(n.code,{children:"must"})," occurrence type"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Query clauses are required to match and will contribute to relevance scores"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"the-must_not-occurrence-type",children:["The ",(0,i.jsx)(n.code,{children:"must_not"})," occurrence type"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Query clauses must not match and do not affect relevance scoring."}),"\n",(0,i.jsx)(n.li,{children:"Query clauses may therefore be cached for improved perfomance."}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"important-things-about-should",children:["Important things about ",(0,i.jsx)(n.code,{children:"should"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If a ",(0,i.jsx)(n.code,{children:"bool"})," query only contains ",(0,i.jsx)(n.code,{children:"should"})," clauses, ",(0,i.jsx)(n.strong,{children:"at least one must match"})]}),"\n",(0,i.jsxs)(n.li,{children:["Useful if you just want something to match and reward matching documents","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If nothing were required to match, we would get irrelevant results"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If a query clause exists for ",(0,i.jsx)(n.code,{children:"must"}),", ",(0,i.jsx)(n.code,{children:"must_not"}),", or ",(0,i.jsx)(n.code,{children:"filter"}),", no ",(0,i.jsx)(n.code,{children:"should"})," clause is\nrequired to match","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Any ",(0,i.jsx)(n.code,{children:"should"})," clauses are only used to boost relevance scores"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minimum_should_match"})," behavior enforces the must clause and any of the should clauses must match."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"the-filter-occurrence-type",children:["The ",(0,i.jsx)(n.code,{children:"filter"})," occurrence type"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Query clauses must match"}),"\n",(0,i.jsxs)(n.li,{children:["Similar to the ",(0,i.jsx)(n.code,{children:"must"})," occurrence type"]}),"\n",(0,i.jsxs)(n.li,{children:["Ignores relevance scores","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This improves the performance of the query"}),"\n",(0,i.jsx)(n.li,{children:"Query results can be cached and reused"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"query-execution-contexts",children:"Query execution contexts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Answers two questions;","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Does this document match" (yes/no)'}),"\n",(0,i.jsxs)(n.li,{children:['"How well does this document match" (',(0,i.jsx)(n.code,{children:"_score"})," metadata field)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Query results are sorted by ",(0,i.jsx)(n.code,{children:"_score"})," descendingly","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The most relevant documents appear at the top"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"The query execution context calculates relevance scores"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"filter-execution-context",children:"Filter execution context"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['Only answers one question: "Does this document match?" (yes/no)',"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No relevance scores are calculated"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Used to filter data, typically on structured data (dates, numbers, ",(0,i.jsx)(n.code,{children:"keyword"}),")","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Relevance scoring is irrelevant if we just want to filter out documents"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Improves performance","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No resources are spent calculating relevance scores"}),"\n",(0,i.jsx)(n.li,{children:"Query results can be cached"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"changing-the-execution-context",children:"Changing the execution context"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["It\u2019s sometimes possible to change the execution context","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only a few queries support it, though"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Typically done with the ",(0,i.jsx)(n.code,{children:"bool"})," query and ",(0,i.jsx)(n.code,{children:"filter"})," aggregation"]}),"\n",(0,i.jsxs)(n.li,{children:["Queries that support this generally have a ",(0,i.jsx)(n.code,{children:"filter"})," parameter"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"boosting-query",children:[(0,i.jsx)(n.code,{children:"boosting"})," Query"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"bool"})," query enables us to increase relevance scores with ",(0,i.jsx)(n.code,{children:"should"})]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"boosting"})," query can decrease relevance scores with ",(0,i.jsx)(n.code,{children:"negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Documents must match the ",(0,i.jsx)(n.code,{children:"positive"})," query clause"]}),"\n",(0,i.jsxs)(n.li,{children:["Documents that match the ",(0,i.jsx)(n.code,{children:"negative"})," query clause have their relevance scores decreased"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"match_all"})," query for ",(0,i.jsx)(n.code,{children:"positive"})," if you don\u2019t want to filter documents"]}),"\n",(0,i.jsxs)(n.li,{children:["Can be used with any query (including compound queries, such as ",(0,i.jsx)(n.code,{children:"bool"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "size": 20,\n    "query": {\n        "boosting": {\n            "positive": {\n                "match": {\n                    "name": "juice"\n                }\n            },\n            "negative": {\n                "match": {\n                    "name": "apple"\n                }\n            },\n            "negative_boost": 0.5\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"disjunction-max-dis_max",children:["Disjunction max (",(0,i.jsx)(n.code,{children:"dis_max"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"dis_max"})," query is a compound query","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A document matches if at least one leaf query matches"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["The best matching matching query clause\u2019s relevance score is used for a\ndocument\u2019s ",(0,i.jsx)(n.code,{children:"_score"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tie_breaker"})," can be used to \u201creward\u201d documents that match multiple queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"multi_match"})," queries are often translated into ",(0,i.jsx)(n.code,{children:"dis_max"})," queries internally"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dis_max-query",children:"dis_max query"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The best matching field\u2019s relevance score is used"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /products/_search\n{\n    "query": {\n        "dis_max": {\n            "queries": [\n                {\n                    "match": {\n                        "name": "vegetable"\n                    }\n                },\n                {\n                    "match": {\n                        "tags": "vegetable"\n                    }\n                }\n            ]\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"querying-nested-objects",children:"Querying nested objects"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When indexing arrays of objects, the relationships between values are not maintained"}),"\n",(0,i.jsx)(n.li,{children:"Queries can yield \u201cunpredictable\u201d results"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"nested"})," data type if you want to query objects independently","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Otherwise the relationships between object values are not maintained"}),"\n",(0,i.jsx)(n.li,{children:"Each nested object is indexed as a hidden Lucene document"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"nested"})," query on fields with the ",(0,i.jsx)(n.code,{children:"nested"})," data type","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Elasticsearch then handles everything automatically"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Create a new index to update the field mapping & reindex documents"}),"\n",(0,i.jsx)(n.li,{children:"Nested Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /recipes/_search\n{\n    "query": {\n        "nested": {\n            "path": "ingredients",\n            "query": {\n                "bool":{\n                    "must": [\n                        {\n                            "match": {\n                                "ingredients.name": "parmesan"\n                            }\n                        },\n                        {\n                            "range": {\n                                "ingredients.amount": {\n                                    "gte": 100\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"For the example, above suppose we have a list of different recipes with ingredients for each one."}),(0,i.jsx)(n.p,{children:"The query above will prevent the issue of showing all recipes containing both parmesan and an ingredient count over 100 for any other ingredients."}),(0,i.jsx)(n.p,{children:"The query will just show recipes containing parmesan of at least count 100."})]}),"\n",(0,i.jsx)(n.h3,{id:"how-documents-are-stored",children:"How documents are stored"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Matching child objects affect the parent document's relevance score"}),"\n",(0,i.jsxs)(n.li,{children:["Elasticsearch calculates a relevance score for each matching child object","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This is because each nested object is a Lucene document"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"score_mode"})," parameter to adjust relevance scoring"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"nested-inner-hits",children:"Nested inner hits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["With the ",(0,i.jsx)(n.code,{children:"nested"})," query, matches are \u201croot documents\u201d","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"E.g. recipes when searching for ingredients"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Sometimes we might want to know what matched instead of just something"}),"\n",(0,i.jsxs)(n.li,{children:["Nested inner hits tell us which nested object(s) matched the query","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"E.g. which ingredient(s) matched in a recipe"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Without inner hits, we only know that something matched"}),"\n",(0,i.jsxs)(n.li,{children:["Simply add the ",(0,i.jsx)(n.code,{children:"inner_hits"})," parameter to the ",(0,i.jsx)(n.code,{children:"nested"})," query"]}),"\n",(0,i.jsxs)(n.li,{children:["Supply ",(0,i.jsx)(n.code,{children:"{}"})," as the value for the default behavior"]}),"\n",(0,i.jsx)(n.li,{children:"Information about the matched nested object(s) is added to search results"}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"offset"})," key to find each object's position within ",(0,i.jsx)(n.code,{children:"_source"})]}),"\n",(0,i.jsxs)(n.li,{children:["Customize results with the ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"size"})," parameters"]}),"\n",(0,i.jsxs)(n.li,{children:["Example with ",(0,i.jsx)(n.code,{children:"inner_hits"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'GET /recipes/_search\n{\n    "query": {\n        "nested": {\n            "path": "ingredients",\n            "inner_hits": {\n                "name": "my_hits",\n                "size": 10\n            },\n            "query": {\n                "bool":{\n                    "must": [\n                        {\n                            "match": {\n                                "ingredients.name": "parmesan"\n                            }\n                        },\n                        {\n                            "range": {\n                                "ingredients.amount": {\n                                    "gte": 100\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"inner_hits"})," can take two parameters:"]}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," enables us to change the key that appears directly within the inner_hits"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"size"})," enables us to configure how many inner hits we want to be returned for each matching document."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"nested-fields-limitations",children:"Nested fields limitations"}),"\n",(0,i.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Indexing and querying ",(0,i.jsx)(n.code,{children:"nested"})," fields is more expensive than for other data types","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Keep performance in mind when using ",(0,i.jsx)(n.code,{children:"nested"})," fields"]}),"\n",(0,i.jsx)(n.li,{children:"If you map documents well, you should be all good, though"}),"\n",(0,i.jsx)(n.li,{children:"Denormalizing data is often a good idea"}),"\n",(0,i.jsx)(n.li,{children:"Elasticsearch has a few settings to prevent things from going wrong"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["An Apache Lucene document is created for each nested object","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Increased storage & query costs"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Important to remember for large datasets"}),"\n",(0,i.jsx)(n.li,{children:"Elasticsearch provides safeguards to reduce the risk of performance bottlenecks"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We need to use a specialized data type (",(0,i.jsx)(n.code,{children:"nested"}),") and query (",(0,i.jsx)(n.code,{children:"nested"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Max 50 ",(0,i.jsx)(n.code,{children:"nested"})," fields per index","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can be increased with the ",(0,i.jsx)(n.code,{children:"index.mapping.nested_fields.limit"})," setting (not recommended)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["10,000 nested objects per document (across all ",(0,i.jsx)(n.code,{children:"nested"})," fields)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Protects against out of memory (OOM) exceptions"}),"\n",(0,i.jsxs)(n.li,{children:["Can be increased with the ",(0,i.jsx)(n.code,{children:"index.mapping.nested_objects.limit"})," setting (not recommended)"]}),"\n"]}),"\n"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(6540);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);